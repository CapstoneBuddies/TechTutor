<?php
/**
 * Test Database Setup Assistant
 * 
 * This script helps set up a separate test database specifically for running unit tests.
 * This prevents test data from interfering with your main database.
 */

echo "=== TechTutor Test Database Setup Assistant ===\n\n";

// Function to get user input
function prompt($message) {
    echo $message . ": ";
    $handle = fopen("php://stdin", "r");
    $line = trim(fgets($handle));
    fclose($handle);
    return $line;
}

// Function to execute SQL queries from a file
function executeSqlFile($conn, $file) {
    echo "Executing SQL from file: $file\n";
    
    $sql = file_get_contents($file);
    if (!$sql) {
        echo "Failed to read SQL file.\n";
        return false;
    }
    
    // Split SQL by semicolon to get individual queries
    $queries = explode(';', $sql);
    $successCount = 0;
    $errorCount = 0;
    
    foreach ($queries as $query) {
        $query = trim($query);
        if (empty($query)) continue;
        
        if ($conn->query($query)) {
            $successCount++;
        } else {
            echo "Error executing query: " . $conn->error . "\n";
            $errorCount++;
        }
    }
    
    echo "Executed $successCount queries successfully with $errorCount errors.\n";
    return $errorCount === 0;
}

// Get database configuration
$host = prompt("Enter database host (default: localhost)");
$host = empty($host) ? 'localhost' : $host;

$username = prompt("Enter database username (default: root)");
$username = empty($username) ? 'root' : $username;

$password = prompt("Enter database password (default: empty)");
// Password can be empty

$testDbName = prompt("Enter name for test database (default: techtutor_test)");
$testDbName = empty($testDbName) ? 'techtutor_test' : $testDbName;

echo "\nConnecting to MySQL server...\n";
try {
    // Connect to MySQL server without selecting a database
    $conn = new mysqli($host, $username, $password);
    
    if ($conn->connect_error) {
        die("Connection failed: " . $conn->connect_error . "\n");
    }
    
    echo "Connected successfully.\n\n";
    
    // Check if the test database already exists
    $result = $conn->query("SHOW DATABASES LIKE '$testDbName'");
    $dbExists = ($result->num_rows > 0);
    
    if ($dbExists) {
        $dropDb = prompt("Test database '$testDbName' already exists. Do you want to drop and recreate it? (y/n)");
        
        if (strtolower($dropDb) === 'y') {
            echo "Dropping existing database...\n";
            if (!$conn->query("DROP DATABASE `$testDbName`")) {
                die("Error dropping database: " . $conn->error . "\n");
            }
            echo "Database dropped successfully.\n";
        } else {
            echo "Using existing database.\n";
        }
    }
    
    // Create the test database if it doesn't exist or was dropped
    if (!$dbExists || strtolower($dropDb) === 'y') {
        echo "Creating test database '$testDbName'...\n";
        if (!$conn->query("CREATE DATABASE `$testDbName` CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci")) {
            die("Error creating database: " . $conn->error . "\n");
        }
        echo "Database created successfully.\n";
    }
    
    // Select the test database
    $conn->select_db($testDbName);
    
    // Ask which schema to use
    echo "\nSchema Options:\n";
    echo "1. Full Schema (from db.sql)\n";
    echo "2. Simplified Test Schema (minimal tables for testing)\n";
    
    $schemaOption = prompt("Select schema option (1/2)");
    
    if ($schemaOption === '1') {
        // Use the full schema
        $schemaFile = __DIR__ . '/../sql/db.sql';
        if (!file_exists($schemaFile)) {
            die("Error: Full schema file not found at $schemaFile\n");
        }
        
        echo "Using full database schema.\n";
        if (!executeSqlFile($conn, $schemaFile)) {
            die("Error importing full schema.\n");
        }
    } else {
        // Use the simplified test schema
        $schemaFile = __DIR__ . '/test-schema.sql';
        if (!file_exists($schemaFile)) {
            die("Error: Test schema file not found at $schemaFile\n");
        }
        
        echo "Using simplified test schema.\n";
        if (!executeSqlFile($conn, $schemaFile)) {
            die("Error importing test schema.\n");
        }
    }
    
    // Create test config file
    echo "\nCreating test database configuration file...\n";
    $configContent = "<?php
// Test Database Configuration - AUTO-GENERATED BY SETUP SCRIPT
// This file is used only for testing and should not be used in production

define('DB_HOST', '$host');
define('DB_USER', '$username');
define('DB_PASSWORD', '$password');
define('DB_NAME', '$testDbName');
define('DB_PORT', 3306);

// Test user credentials
define('TEST_TECHGURU_EMAIL', 'tutor@test.com');
define('TEST_TECHGURU_PASSWORD', 'Abc123');

define('TEST_TECHKID_EMAIL', 'student@test.com');
define('TEST_TECHKID_PASSWORD', 'Abc123');

define('TEST_ADMIN_EMAIL', 'admin@test.com');
define('TEST_ADMIN_PASSWORD', 'Abc123');
";
    
    if (file_put_contents(__DIR__ . '/config.test.php', $configContent)) {
        echo "Configuration file created at test/config.test.php\n";
    } else {
        echo "Error creating configuration file.\n";
    }
    
    // Update phpunit.xml to use the test config
    echo "\nUpdating PHPUnit configuration to use test database...\n";
    $phpunitFile = __DIR__ . '/phpunit.xml';
    if (file_exists($phpunitFile)) {
        $phpunitContent = file_get_contents($phpunitFile);
        // Use preg_replace to update the DB_NAME in phpunit.xml
        $phpunitContent = preg_replace('/<env name="DB_NAME" value="[^"]*"/', '<env name="DB_NAME" value="' . $testDbName . '"', $phpunitContent);
        
        if (file_put_contents($phpunitFile, $phpunitContent)) {
            echo "PHPUnit configuration updated.\n";
        } else {
            echo "Error updating PHPUnit configuration.\n";
        }
    } else {
        echo "Warning: PHPUnit configuration file not found at $phpunitFile\n";
    }
    
    // Close the connection
    $conn->close();
    
    echo "\n=== Setup Complete ===\n";
    echo "Your test database is ready. To run tests using this configuration:\n";
    echo "php assets/vendor/bin/phpunit -c test/phpunit.xml\n\n";
    echo "To run a specific test file:\n";
    echo "php assets/vendor/bin/phpunit -c test/phpunit.xml test/unit/UserTest.php\n";
    
} catch (Exception $e) {
    echo "Error: " . $e->getMessage() . "\n";
    exit(1);
}